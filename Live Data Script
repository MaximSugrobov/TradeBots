import pandas as pd
import sqlalchemy
from binance import Client
from binance import AsyncClient, BinanceSocketManager
import nest_asyncio
import asyncio

nest_asyncio.apply()

api_key = '1szr5pdR3hl3BcYcglBMW1D6anUChUAhwrhOdj2moz6ZevAKSoh98si2DhqUXIm5'
api_secret = 'wRZvr9X7XesClNGkRHfl72cWGDFU5wjBqFjKQTQj6Gw9Q7p32HVtOeJiZfIDFlJR'

client = Client(api_key, api_secret)

bsm = BinanceSocketManager(client)

socket = bsm.trade_socket('BTCUSDT')

def createframe(msg):
    df = pd.DataFrame([msg])
    df = df.loc[:, ['s','E','p']]
    df.columns = ['Symbol','Time','Price']
    df.Price = df.Price.astype(float)
    df.Time = pd.to_datetime(df.Time, unit='ms')
    return df

engine = sqlalchemy.create_engine('sqlite:///BTCUSDTstream.db')

async def main():
    client = await AsyncClient.create()
    bm = BinanceSocketManager(client)

    ts = bm.trade_socket('BTCUSDT')

    async with ts as tscm:
        while True:
            res = await tscm.recv()
            if res:
                frame = createframe(res)
                frame.to_sql('BTCUSDT', engine, if_exists='append', index=False)
                print(createframe(res))

    await client.close_connection()

if __name__ == "__main__":

    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())

