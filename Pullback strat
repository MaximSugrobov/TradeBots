import pandas as pd
import ta
import numpy as np
import matplotlib.pyplot as plt

%matplotlib inline

plt.style.use('ggplot')
plt.rcParams['figure.figsize'] = (12, 5)

from binance import Client
client = Client(api_key, api_secret)

symbols = ['SOLUSDT', 'ETHUSDT', 'BNBUSDT', 'MATICUSDT', 'LUNAUSDT', 'XECUSDT', 'EOSUSDT', '1INCHUSDT', 'BCHUSDT', 
           'ONEUSDT', 'AVAXUSDT', 'XLMUSDT', 'ETCUSDT', 'FTMUSDT', 'ATOMUSDT', 'AXSUSDT', 'ADAUSDT', 'GALAUSDT', 
           'EGLDUSDT', 'CAKEUSDT', 'DOTUSDT', 'ALGOUSDT', 'UNIUSDT', 'SHIBUSDT', 'NEOUSDT', 'KLAYUSDT', 'XRPUSDT', 
           'NEARUSDT', 'VETUSDT', 'FILUSDT', 'HNTUSDT', 'LTCUSDT', 'ICPUSDT', 'LINKUSDT', 'THETAUSDT', 'ENJUSDT', 
           'QNTUSDT', 'XTZUSDT', 'FTTUSDT', 'GRTUSDT', 'MKRUSDT']

tradesdf = pd.DataFrame({'symbol':symbols})

tradesdf['open_trade'] = False

tradesdf['quantity'] = 0

def changepos(symbol, order):
    if order['side'] == 'BUY':
        tradesdf.loc[tradesdf.symbol == symbol, 'open_trade'] = True
        tradesdf.loc[tradesdf.symbol == symbol, 'quantity'] = float(order['origQty'])
    else:
        tradesdf.loc[tradesdf.symbol == symbol, 'open_trade'] = False
        tradesdf.loc[tradesdf.symbol == symbol, 'quantity'] = 0

def getminutedata(symbol):
    frame = pd.DataFrame(client.get_historical_klines(symbol,'1m','200 minutes ago UTC'))
    frame = frame[[0,4]]
    frame.columns = ['Time','Close']
    frame.set_index('Time', inplace=True)
    frame.index = pd.to_datetime(frame.index, unit='ms')
    frame.Close = frame.astype(float)
    return frame

df = getminutedata('SOLUSDT')

def apply_ind(df):
    df['SMA_200'] = df.Close.rolling(200).mean()
    df['SMA_20'] = df.Close.rolling(20).mean()
    df['std_div'] = df.Close.rolling(20).std()
    df['Upper'] = df.SMA_20 + 2 * df.std_div
    df['Lower'] = df.SMA_20 - 2 * df.std_div
    df['rsi'] = ta.momentum.rsi(df.Close, 2)

apply_ind(df)

df.tail(800)[['Close','SMA_200','Upper','Lower']].plot()

def conditions(df):
    df['Buy'] = np.where((df.Close > df.SMA_200) &
                        (df.Close < df.Lower), 1, 0)
    df['Sell'] = np.where((df.rsi > 50), 1, 0)

conditions(df)

def pricecalc(symbol, limit=0.98):
    raw_price = float(client.get_symbol_ticker(symbol=symbol)['price'])
    dec_len = len(str(raw_price).split('.')[1])
    price = raw_price * limit
    return round(price, dec_len)

def right_rounding(Lotsize):
    splitted = str(Lotsize).split('.')
    if float(splitted[0]) == 1:
        return 0
    else:
        return len(splitted[1])

def quantitycalc(symbol, investment):
    info = client.get_symbol_info(symbol=symbol)
    Lotsize = float([i for i in info['filters'] if i['filterType'] == 'LOT_SIZE'][0]['minQty'])
    price = pricecalc(symbol)
    qty = round(investment/price, right_rounding(Lotsize))
    return qty

def buy(symbol, investment):
    order = client.order_limit_buy(symbol=symbol, price=pricecalc(symbol), quantity=quantitycalc(symbol, investment))
    changepos(symbol, order)
    print(order)

def sell(symbol):
    order = client.create_order(
        symbol=symbol, 
        side='SELL', 
        type='MARKET', 
        quantity=tradesdf[tradesdf.symbol == symbol].quantity.values[0])
    changepos(symbol, order)
    print(order)

def trader(investment):
    for symbol in tradesdf[tradesdf.open_trade == True].symbol:
        df = getminutedata(symbol)
        apply_ind(df)
        conditions(df)
        lastrow = df.tail(1)
        if lastrow.Sell.values[0] == 1 and not client.get_open_orders(symbol=symbol):
            sell(symbol)
    for symbol in tradesdf[tradesdf.open_trade == False].symbol:
        df = getminutedata(symbol)
        apply_ind(df)
        conditions(df)
        lastrow = df.tail(1)
        if lastrow.Buy.values[0] == 1:
            buy(symbol, investment)

import time

while True:
    time.sleep(10)
    print(tradesdf[tradesdf.open_trade == True].symbol)
    try:
        trader(10)
    except KeyboardInterrupt:
        break
    except:
        continue
